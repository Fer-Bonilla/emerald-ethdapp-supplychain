// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')
const truffleAssert = require('truffle-assertions');
const Web3EthAbi = require('web3-eth-abi');

contract('SupplyChain', async accounts => {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    
    var SupplyChain = artifacts.require('SupplyChain')
    
    const ownerID = accounts[0]
    const originMinerID = accounts[1]
    const originMineName = "Muzo"
    const originMineInformation = "Colombia Muzo mine"
    const originMineLatitude = "12.2'"
    const originMineLongitude = "32.1'"
    var productID = sku + upc
    const emeraldState = 18
    const scaleInfo = "Color:Green,Weight=0.1Oz"
    const certifiedProperties = "Color:Green,Weight=0.1Oz"
    const manufacturedInfo = "Color:Green,Weight=0.1Oz"
    const price = web3.utils.toWei("1", "ether")

    const laboratoryID = accounts[2]
    const custodianID = accounts[3]
    const manufacturerID = accounts[4]
    const customerID = accounts[5]
    //const customerID = '0x00000000000000000000000000000000000000'



    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Miner accounts[1] ", accounts[1])
    console.log("Laboratory: accounts[2] ", accounts[2])
    console.log("Custodian: accounts[3] ", accounts[3])
    console.log("Manufacturer: accounts[4] ", accounts[4])
    console.log("Customer: accounts[5] ", accounts[5])

    it("init", async () => {
        const supplyChain = await SupplyChain.deployed();
        supplyChain.addCustomer(customerID);
        supplyChain.addCustodian(custodianID);
        supplyChain.addMiner(originMinerID);
        supplyChain.addLaboratory(laboratoryID);
        supplyChain.addManufacturer(manufacturerID);
    });

    // 1st Test
    it("Testing smart contract function extractEmerald() that allows a Miner to extract emeralds", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;

        let tx = await supplyChain.extractEmerald(
            sku,
            upc, 
            originMinerID,
            originMineName,
            originMineInformation,
            originMineLatitude,
            originMineLongitude,
            {from: originMinerID});

        truffleAssert.eventEmitted(tx, 'Mined', (ev) => {
            eventEmitted = true; 
            return ev.upc.words[0] === upc;
        });  
              
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)      
        const decodeBasicData = Web3EthAbi.decodeParameters(['uint','uint','address','address','string','string','string','string'],resultBufferOne)
        
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const decodeDetailedData = Web3EthAbi.decodeParameters(['uint','uint','uint','uint','uint','address','address','address','address'],resultBufferTwo)

        // Verify the result set
        assert.equal(decodeBasicData[0], sku, 'Error: Invalid emerald SKU')
        assert.equal(decodeBasicData[1], upc, 'Error: Invalid emerald UPC')
        assert.equal(decodeBasicData[2], originMinerID, 'Error: Missing or Invalid ownerID')
        assert.equal(decodeBasicData[3], originMinerID, 'Error: Missing or Invalid originMinerID')
        assert.equal(decodeBasicData[4], originMineName, 'Error: Missing or Invalid originMineName')
        assert.equal(decodeBasicData[5], originMineInformation, 'Error: Missing or Invalid originMineInformation')
        assert.equal(decodeBasicData[6], originMineLatitude, 'Error: Missing or Invalid originMineLatitude')
        assert.equal(decodeBasicData[7], originMineLongitude, 'Error: Missing or Invalid originMineLongitude')
        assert.equal(decodeDetailedData[4], 0, 'Error: Invalid Emerald State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function scaleEmerald() that allows a Miner Scale and register emerald information", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Mark an Emerald as Scaled by calling function scaleEmerald()
        let tx = await supplyChain.scaleEmerald(
            upc, 
            scaleInfo,
            {from: originMinerID});

        // Watch the emitted event Scaled()
        truffleAssert.eventEmitted(tx, 'Scaled', (ev) => {
            eventEmitted = true; 
            return ev.upc.words[0] === upc;
        });        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const decodeDetailedData = Web3EthAbi.decodeParameters(['uint','uint','uint','uint','uint','address','address','address','address'],resultBufferTwo);        

        // Verify the result set
        assert.equal(decodeDetailedData[4], 1, 'Error: Invalid Emerald State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 3rd Test
    it("Testing smart contract function packEmerald() that allows a Miner pack an Emerald for shipping", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Mark an Emerald as Scaled by calling function scaleEmerald()
        let tx = await supplyChain.packScaledEmerald(
            upc,
            laboratoryID,
            custodianID,
            {from: originMinerID});

        // Watch the emitted event Scaled()
        truffleAssert.eventEmitted(tx, 'PackedForLab', (ev) => {
            eventEmitted = true; 
            return ev.upc.words[0] === upc;
        });                

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const decodeDetailedData = Web3EthAbi.decodeParameters(['uint','uint','uint','uint','uint','address','address','address','address'],resultBufferTwo);        
        
        // Verify the result set
        assert.equal(decodeDetailedData[4], 2, 'Error: Invalid Emerald State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    })    

    // 4th Test
    it("Testing smart contract function shipToLaboratory() that allows a Miner send the packed Emerald to Lab for certification", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Mark an Emerald as Scaled by calling function scaleEmerald()
        let tx = await supplyChain.shipToLaboratory(
            upc,
            {from: originMinerID});

        // Watch the emitted event Scaled()
        truffleAssert.eventEmitted(tx, 'ShipedToLab', (ev) => {
            eventEmitted = true; 
            return ev.upc.words[0] === upc;
        });                

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const decodeDetailedData = Web3EthAbi.decodeParameters(['uint','uint','uint','uint','uint','address','address','address','address'],resultBufferTwo);        
        
        // Verify the result set
        assert.equal(decodeDetailedData[4], 3, 'Error: Invalid Emerald State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
          
    })    

    // 5th Test
    it("Testing smart contract function laboratoryReceived() that allows a Laboratory confirm emeralds reception", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Mark an Emerald as Scaled by calling function scaleEmerald()
        let tx = await supplyChain.laboratoryReceived(
            upc,
            {from: laboratoryID});

        // Watch the emitted event Scaled()
        truffleAssert.eventEmitted(tx, 'LabReceived', (ev) => {
            eventEmitted = true; 
            return ev.upc.words[0] === upc;
        });                

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const decodeDetailedData = Web3EthAbi.decodeParameters(['uint','uint','uint','uint','uint','address','address','address','address'],resultBufferTwo);        
        
        // Verify the result set
        assert.equal(decodeDetailedData[4], 4, 'Error: Invalid Emerald State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    })    

    // 6th Test
    it("Testing smart contract function certifyEmerald() that allows a laboratory to certity emeralds properties", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Mark an Emerald as Scaled by calling function scaleEmerald()
        let tx = await supplyChain.certifyEmerald(           
            upc,
            certifiedProperties,
            {from: laboratoryID});

        // Watch the emitted event Scaled()
        truffleAssert.eventEmitted(tx, 'Certified', (ev) => {
            eventEmitted = true; 
            return ev.upc.words[0] === upc;
        });                

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const decodeDetailedData = Web3EthAbi.decodeParameters(['uint','uint','uint','uint','uint','address','address','address','address'],resultBufferTwo);        
        
        // Verify the result set
        assert.equal(decodeDetailedData[4], 5, 'Error: Invalid Emerald State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
              
    })    

    // 7th Test
    it("Testing smart contract function shipToSecureStore() that allows a laboratory ship a certified emerald to an authorized custodian", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Mark an Emerald as Scaled by calling function scaleEmerald()
        let tx = await supplyChain.shipToSecureStore(           
            upc,
            {from: laboratoryID});

        // Watch the emitted event Scaled()
        truffleAssert.eventEmitted(tx, 'ShippedToStore', (ev) => {
            eventEmitted = true; 
            return ev.upc.words[0] === upc;
        });                

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const decodeDetailedData = Web3EthAbi.decodeParameters(['uint','uint','uint','uint','uint','address','address','address','address'],resultBufferTwo);        
        
        // Verify the result set
        assert.equal(decodeDetailedData[4], 6, 'Error: Invalid Emerald State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
             
    })    

    // 8th Test
    it("Testing smart contract function SecureStorageReceived() that allows a custodian confirm the certified emerald reception", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Mark an Emerald as Scaled by calling function scaleEmerald()
        let tx = await supplyChain.SecureStorageReceived(           
            upc,
            {from: custodianID});

        // Watch the emitted event Scaled()
        truffleAssert.eventEmitted(tx, 'StorageReceived', (ev) => {
            eventEmitted = true; 
            return ev.upc.words[0] === upc;
        });                

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const decodeDetailedData = Web3EthAbi.decodeParameters(['uint','uint','uint','uint','uint','address','address','address','address'],resultBufferTwo);        
        
        //console.log(decodeDetailedData)
        // Verify the result set
        assert.equal(decodeDetailedData[4], 7, 'Error: Invalid Emerald State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    })    

    // 9th Test
    it("Testing smart contract function StoreEmerald() that allows a custodian confirm to the Emerald Owner that a certified emerald was stored", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Mark an Emerald as Scaled by calling function scaleEmerald()
        let tx = await supplyChain.StoreEmerald(           
            upc,
            {from: custodianID});

        // Watch the emitted event Scaled()
        truffleAssert.eventEmitted(tx, 'Stored', (ev) => {
            eventEmitted = true; 
            return ev.upc.words[0] === upc;
        });                

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const decodeDetailedData = Web3EthAbi.decodeParameters(['uint','uint','uint','uint','uint','address','address','address','address'],resultBufferTwo);        
        
        //console.log(decodeDetailedData)
        // Verify the result set
        assert.equal(decodeDetailedData[4], 8, 'Error: Invalid Emerald State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    })  

    // 10th Test
    it("Testing smart contract function registerForSale() that allows an emerald owner register the stored emerald for sale after custodian confirmation", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Mark an Emerald as Scaled by calling function scaleEmerald()
        let tx = await supplyChain.registerForSale(           
            upc,
            price,
            {from: originMinerID});

        // Watch the emitted event Scaled()
        truffleAssert.eventEmitted(tx, 'ForSale', (ev) => {
            eventEmitted = true; 
            return ev.upc.words[0] === upc;
        });                

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const decodeDetailedData = Web3EthAbi.decodeParameters(['uint','uint','uint','uint','uint','address','address','address','address'],resultBufferTwo);        
        
        //console.log(decodeDetailedData)
        // Verify the result set
        assert.equal(decodeDetailedData[4], 9, 'Error: Invalid Emerald State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    })  

    // 11th Test
    it("Testing smart contract function buyFromMiner() that allows a manufacturer buy a certified emerald from a Miner", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Mark an Emerald as Scaled by calling function scaleEmerald()
        let tx = await supplyChain.buyFromMiner(           
            upc,
            {from: manufacturerID, value: price});

        // Watch the emitted event Scaled()
        truffleAssert.eventEmitted(tx, 'Sold', (ev) => {
            eventEmitted = true; 
            return ev.upc.words[0] === upc;
        });                

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const decodeDetailedData = Web3EthAbi.decodeParameters(['uint','uint','uint','uint','uint','address','address','address','address'],resultBufferTwo);        
        
        //console.log(decodeDetailedData)
        // Verify the result set
        assert.equal(decodeDetailedData[4], 10, 'Error: Invalid Emerald State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    })  

    // 12th Test
    it("Testing smart contract function shipToManufacturer() that allows a custodian send to a manufacturer a buyed emerald", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Mark an Emerald as Scaled by calling function scaleEmerald()
        let tx = await supplyChain.shipToManufacturer(           
            upc,
            {from: custodianID});

        // Watch the emitted event Scaled()
        truffleAssert.eventEmitted(tx, 'ShipToManufacture', (ev) => {
            eventEmitted = true; 
            return ev.upc.words[0] === upc;
        });                

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const decodeDetailedData = Web3EthAbi.decodeParameters(['uint','uint','uint','uint','uint','address','address','address','address'],resultBufferTwo);        
        
        //console.log(decodeDetailedData)
        // Verify the result set
        assert.equal(decodeDetailedData[4], 11, 'Error: Invalid Emerald State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    })  

    // 13th Test
    it("Testing smart contract function receiveFromStorage() that allows a Manufacturer confirm an emerald reception", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Mark an Emerald as Scaled by calling function scaleEmerald()
        let tx = await supplyChain.receiveFromStorage(           
            upc,
            {from: manufacturerID});

        // Watch the emitted event Scaled()
        truffleAssert.eventEmitted(tx, 'ManufacturerReceived', (ev) => {
            eventEmitted = true; 
            return ev.upc.words[0] === upc;
        });                

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const decodeDetailedData = Web3EthAbi.decodeParameters(['uint','uint','uint','uint','uint','address','address','address','address'],resultBufferTwo);        
        
        //console.log(decodeDetailedData)
        // Verify the result set
        assert.equal(decodeDetailedData[4], 12, 'Error: Invalid Emerald State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    })  

    // 14th Test
    it("Testing smart contract function manufactureEmerald() that allows a Manufacturer confirm the emerald cutting process", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Mark an Emerald as Scaled by calling function scaleEmerald()
        let tx = await supplyChain.manufactureEmerald(           
            upc,
            manufacturedInfo,
            {from: manufacturerID});

        // Watch the emitted event Scaled()
        truffleAssert.eventEmitted(tx, 'Manufactured', (ev) => {
            eventEmitted = true; 
            return ev.upc.words[0] === upc;
        });                

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const decodeDetailedData = Web3EthAbi.decodeParameters(['uint','uint','uint','uint','uint','address','address','address','address'],resultBufferTwo);        
        
        //console.log(decodeDetailedData)
        // Verify the result set
        assert.equal(decodeDetailedData[4], 13, 'Error: Invalid Emerald State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    }) 

    // 15th Test
    it("Testing smart contract function packCutEmerald() that allows a Manufacturer confirm the packing process", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Mark an Emerald as Scaled by calling function scaleEmerald()
        let tx = await supplyChain.packCutEmerald(           
            upc,
            {from: manufacturerID});

        // Watch the emitted event Scaled()
        truffleAssert.eventEmitted(tx, 'PackedForSale', (ev) => {
            eventEmitted = true; 
            return ev.upc.words[0] === upc;
        });                

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const decodeDetailedData = Web3EthAbi.decodeParameters(['uint','uint','uint','uint','uint','address','address','address','address'],resultBufferTwo);        
        
        // Verify the result set
        assert.equal(decodeDetailedData[4], 14, 'Error: Invalid Emerald State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    }) 

    // 16th Test
    it("Testing smart contract function packCutEmerald() that allows a Manufacturer confirm the packing process", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Mark an Emerald as Scaled by calling function scaleEmerald()
        let tx = await supplyChain.publishEmerald(           
            upc,
            price,
            {from: manufacturerID});

        // Watch the emitted event Scaled()
        truffleAssert.eventEmitted(tx, 'Published', (ev) => {
            eventEmitted = true; 
            return ev.upc.words[0] === upc;
        });                

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const decodeDetailedData = Web3EthAbi.decodeParameters(['uint','uint','uint','uint','uint','address','address','address','address'],resultBufferTwo);        
        
        // Verify the result set
        assert.equal(decodeDetailedData[4], 15, 'Error: Invalid Emerald State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    }) 


    // 17th Test
    it("Testing smart contract function buyFromManufacturer() that allows a Customer buy an emerald from a Manufacturer", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Mark an Emerald as Scaled by calling function scaleEmerald()
        let tx = await supplyChain.buyFromManufacturer(           
            upc,
            {from: customerID, value: price});

        // Watch the emitted event Scaled()
        truffleAssert.eventEmitted(tx, 'Buyed', (ev) => {
            eventEmitted = true; 
            return ev.upc.words[0] === upc;
        });                

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const decodeDetailedData = Web3EthAbi.decodeParameters(['uint','uint','uint','uint','uint','address','address','address','address'],resultBufferTwo);        
        
        // Verify the result set
        assert.equal(decodeDetailedData[4], 16, 'Error: Invalid Emerald State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    })     

    // 18th Test
    it("Testing smart contract function shipEmeraldToCustomer() that allows a Manufacturer ship an buyed emerald to a customermer", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Mark an Emerald as Scaled by calling function scaleEmerald()
        let tx = await supplyChain.shipEmeraldToCustomer(           
            upc,
            {from: manufacturerID});

        // Watch the emitted event Scaled()
        truffleAssert.eventEmitted(tx, 'ShippedToCustomer', (ev) => {
            eventEmitted = true; 
            return ev.upc.words[0] === upc;
        });                

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const decodeDetailedData = Web3EthAbi.decodeParameters(['uint','uint','uint','uint','uint','address','address','address','address'],resultBufferTwo);        
        
        // Verify the result set
        assert.equal(decodeDetailedData[4], 17, 'Error: Invalid Emerald State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    })
    
    // 19th Test
    it("Testing smart contract function deliverToCustomer() that allows a Manufacturer ship a buyed emerald to a customermer", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Mark an Emerald as Scaled by calling function scaleEmerald()
        let tx = await supplyChain.deliverToCustomer(           
            upc,
            {from: customerID});

        // Watch the emitted event Scaled()
        truffleAssert.eventEmitted(tx, 'Delivered', (ev) => {
            eventEmitted = true; 
            return ev.upc.words[0] === upc;
        });                

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const decodeDetailedData = Web3EthAbi.decodeParameters(['uint','uint','uint','uint','uint','address','address','address','address'],resultBufferTwo);        
        
        // Verify the result set
        assert.equal(decodeDetailedData[4], 18, 'Error: Invalid Emerald State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    })      

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)      
        const decodeBasicData = Web3EthAbi.decodeParameters(['uint','uint','address','address','string','string','string','string'],resultBufferOne)
        
        // Verify the result set
        assert.equal(decodeBasicData[0], sku, 'Error: Invalid emerald SKU')
        assert.equal(decodeBasicData[1], upc, 'Error: Invalid emerald UPC')
        assert.equal(decodeBasicData[2], originMinerID, 'Error: Missing or Invalid ownerID')
        assert.equal(decodeBasicData[3], originMinerID, 'Error: Missing or Invalid originMinerID')
        assert.equal(decodeBasicData[4], originMineName, 'Error: Missing or Invalid originMineName')
        assert.equal(decodeBasicData[5], originMineInformation, 'Error: Missing or Invalid originMineInformation')
        assert.equal(decodeBasicData[6], originMineLatitude, 'Error: Missing or Invalid originMineLatitude')
        assert.equal(decodeBasicData[7], originMineLongitude, 'Error: Missing or Invalid originMineLongitude')
        
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const decodeDetailedData = Web3EthAbi.decodeParameters(['uint','uint','uint','uint','uint','address','address','address','address'],resultBufferTwo)

        // Verify the result set
        assert.equal(decodeDetailedData[0], sku, 'Error: Invalid emerald SKU')
        assert.equal(decodeDetailedData[1], upc, 'Error: Invalid emerald UPC')
        assert.equal(decodeDetailedData[2], productID, 'Error: Invalid ProductID')
        assert.equal(decodeDetailedData[3], price, 'Error: Invalid Emerald Price')
        assert.equal(decodeDetailedData[4], emeraldState, 'Error: Invalid Emerald State')
        assert.equal(decodeDetailedData[5], laboratoryID, 'Error: Invalid LaboratoryID')
        assert.equal(decodeDetailedData[6], custodianID, 'Error: Invalid CustodianID')
        assert.equal(decodeDetailedData[7], manufacturerID, 'Error: Invalid ManufacturerID')
        assert.equal(decodeDetailedData[8], customerID, 'Error: Invalid CustomerID')
        
    })

});

